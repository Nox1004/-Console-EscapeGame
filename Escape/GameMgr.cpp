#include "GameMgr.h"

GameMgr::GameMgr() : _cntidx(0), _rows(20), _cols(56)
{
	// map 열-56 행-20 으로 생각하고 제작한다.
	vector<string> map;

	// 0 - 움직일 수 있는 공간
	// 1 - 벽						--> 이쪽으로 이동불가 
	// 2 - 보이지 않는 벽			--> 이쪽으로 이동불가
	// 3 - 보이지 않는 추락 함정	--> 층수 - 1 함정위치값에 추락
	// 4 - 보이지 않는 폭탄 함정	--> 탈출실패
	// d - 목적지

#pragma region 첫번째 층

	map.push_back("11111111111111111111111111111111111111111111111111111111");
	map.push_back("10000000001111111111110000000000000000000000000000000001");
	map.push_back("10000000001111111111110000000000000000000000000000000001");
	map.push_back("10000000001111111111110000000001111111111111111000000001");
	map.push_back("10000000001111111111110000000001111111111111111000000001");
	map.push_back("10000000000000000111110000000001111111111111111000000001");
	map.push_back("10000000000000000111110000000001111111111111111000000001");
	map.push_back("11111111111110000111110000000001111111111111111000000001");
	map.push_back("11111111111110000111110000000001111111111111111000000001");
	map.push_back("11111111111110000111110000000001111000000000000000000001");
	map.push_back("10000000000000000111110000000001111000000000000000000001");
	map.push_back("10000000000000000111110000000001111000000000000000000001");
	map.push_back("10000000000000000000000000000001111000000000000000000001");
	map.push_back("10000000000000000000000000000001111000000000000000000001");
	map.push_back("11111111111111111111111111111111111000000000000000000001");
	map.push_back("11111111111111111111111111111111111000000000000000000001");
	map.push_back("11111111111111111111111111111111111000000000000000000001");
	map.push_back("111111d0000000000000000000000000000000000000000000000001");
	map.push_back("11111111100000000000000000000000000000000000000000000001");
	map.push_back("11111111111111111111111111111111111111111111111111111111");

	_map.push_back(map);
	map.clear();
#pragma endregion

#pragma region 두번째 층
	map.push_back("11111111111111111111111111111111111111111111111111111111");
	map.push_back("11100000000000000000000000000000000000000000000000000001");
	map.push_back("11100000000000000000000000000000000000000000000000000001");
	map.push_back("11100000001111111111110000000001110000000000000000000001");
	map.push_back("11100000001111111111110000000001110000000000000000000001");
	map.push_back("11100000000000000111110000000001110000000000000000000001");
	map.push_back("11100000000000000111110000000001111222222111111000000001");
	map.push_back("11111111111110000111110000000001111222222111111000000001");
	map.push_back("11111111111110000111110000000001111222222111111000000001");
	map.push_back("11111111111110000111110000000001111000000111111000000001");
	map.push_back("11111111111110000111110000000002222000000111111000000001");
	map.push_back("11100000000000000222220000000002222000000000000000000001");
	map.push_back("11100000000000000222220000000001111000000000000000000001");
	map.push_back("11100000000000000222220000000001111000000111111222222221");
	map.push_back("11100111111111111111112222222221111000000111111222222221");
	map.push_back("11100111111111111111112222222221111000000111111222222221");
	map.push_back("11100111111111100000000000000000000000000000000000000001");
	map.push_back("111000s111111d004400000000000000000000000000000000000001");
	map.push_back("11111111111111100000000000000000000000000000000000000001");
	map.push_back("11111111111111111111111111111111111111111111111111111111");
	_map.push_back(map);
	map.clear();
#pragma endregion

#pragma region 세번째 층
	map.push_back("11111111111111111111111111111111111111111111111111111111");
	map.push_back("11100000002200000000000001111000000000000220022211111111");
	map.push_back("11100022000000220000000001111000000000000220000011111111");
	map.push_back("11100022111112222111110002202000111110000220020011000001");
	map.push_back("11100022111112222111110000002000111110000000022000022001");
	map.push_back("11100000000000000111110002202000111110000000222222222001");
	map.push_back("11100000000000000111110002202000111110000111111000000001");
	map.push_back("11111111111110000111110002002000111110000111111221111001");
	map.push_back("11111111111110000111110002222000111110000111111221111001");
	map.push_back("11111111111110000111110000000000111110000111111000000001");
	map.push_back("11111111111110000111111111111112222112222111111000001111");
	map.push_back("11100000000000000000000000000002222000000000000000001111");
	map.push_back("11100000000000000000000000004002222000000000000000001111");
	map.push_back("11100000000000000000000000000002222000000000000111111111");
	map.push_back("11100001111111111111110000011111111111111000000111111111");
	map.push_back("11100001111111111111110044011111111111111000000111111111");
	map.push_back("111000011111111111111100440111111111111111111d1111111111");
	map.push_back("1110000111111s111111110000011111111111111111111111111111");
	map.push_back("11100002000000000000000000011111111111111111111111111111");
	map.push_back("11111111111111111111111111111111111111111111111111111111");
	_map.push_back(map);
	map.clear();
#pragma endregion

#pragma region 네번째 층
	map.push_back("11111111111111111111111111111111111111111111111111111111");
	map.push_back("11100011000000110000000011111000000000000000000011111111");
	map.push_back("11100000003300000000000011111000000000000000000011111111");
	map.push_back("11100011111112222111110011111000011111000000000011111111");
	map.push_back("11100011111112222111110020001000011111000000000011111111");
	map.push_back("11100022000000000111110020201000011111000000000000000001");
	map.push_back("11100000000220000111110020200000011111000111111000000001");
	map.push_back("11122111111111100111110020200000011111000111111000000001");
	map.push_back("11122111111111100111110000200000011111000111111000000001");
	map.push_back("11122111111111100111111111111110011111222111111333330001");
	map.push_back("11122111111111100111111111111110011111222111111333331111");
	map.push_back("11100000000000000000000000000030033000000000000000001111");
	map.push_back("11100000000000000000000000000033003000000000000000001111");
	map.push_back("11100001111111111111110000011111100000000000000111111111");
	map.push_back("11100001111111111111110000011111111111111000000111111111");
	map.push_back("11100001111111d11111110000011111111111111000000111111111");
	map.push_back("111000011111100011111100000111111111111111111s1111111111");
	map.push_back("11100001111110001111110000011111111111111111111111111111");
	map.push_back("11100000000000000000030000011111111111111111111111111111");
	map.push_back("11111111111111111111111111111111111111111111111111111111");
	_map.push_back(map);
	map.clear();
#pragma endregion

#pragma region 다섯번째 층
	map.push_back("11111111111111111111111111111111111111111111111111111111");
	map.push_back("11111111111111111111111111111000000000330000000011111111");
	map.push_back("11100000000000000000000011111000000000330000000011111111");
	map.push_back("11122211111110000111110000000000011111000000000011111111");
	map.push_back("11122211111110000111112020202020211111000000000011111111");
	map.push_back("11100024200000000111110000000000022222000000000000001111");
	map.push_back("11100000002420000111110211200022211111000111111222201111");
	map.push_back("11100111111111111111110011224220000000000111111000201111");
	map.push_back("11100000000000033000000000000000011111000111111020201111");
	map.push_back("11100111111111111111111111111112211111000111111020001111");
	map.push_back("11100111111111111111111111111112211111222111111022221111");
	map.push_back("11100000000000000330000000001110000000000000000000001111");
	map.push_back("11100000000000000330000000001110022222222222222200001111");
	map.push_back("11111001111111411111112211101110000000000000000201111111");
	map.push_back("11111001111111011111110022201111111111111022200201111111");
	map.push_back("11111002000000s00000000022201111111111111020000201111111");
	map.push_back("11111001111111011111110011101111111111111111011101111111");
	map.push_back("11111001111111211111110011101111111111111111024001111111");
	map.push_back("11111000000000000000000011100000000000000000d11111111111");
	map.push_back("11111111111111111111111111111111111111111111111111111111");

	_map.push_back(map);
	map.clear();
#pragma endregion


}

void GameMgr::gameStart()
{
	_cntidx = 0;
	_playerEvent = None;

	_playerPos = make_pair(1, 1);
	_playerPrePos = make_pair(1, 1);
}

//
// 플레이어가 이동할 수 있는 공간인지 판별하는 함수
// 이동이 불가능하면 false를 반환. 가능하면 true를 반환
//
bool GameMgr::checkPlayerMoving(InputMgr::KeyInput key)
{
	bool result = false;

	switch (key)
	{
	case InputMgr::KeyInput::Left: 
		{
			auto ctemp = _map[_cntidx][getPlayerPosY()][getPlayerPosX()-1];
			
			checkNextEvent(&result, ctemp);
		}
		break;

	case InputMgr::KeyInput::Right:
		{
			auto ctemp = _map[_cntidx][getPlayerPosY()][getPlayerPosX()+1];
			
			checkNextEvent(&result, ctemp);
		}
		break;

	case InputMgr::KeyInput::Up:
		{
			auto ctemp = _map[_cntidx][getPlayerPosY() - 1][getPlayerPosX()];
			
			checkNextEvent(&result, ctemp);
		}
		break;

	case InputMgr::KeyInput::Down:
		{
			auto ctemp = _map[_cntidx][getPlayerPosY() + 1][getPlayerPosX()];
			
			checkNextEvent(&result, ctemp);
		}
		break;
	}

	return result;
}

//
// 플레이어 이동처리
// 게임 씬에서 호출하고 있다.
//
void GameMgr::playerMove(InputMgr::KeyInput key)
{
	_playerPrePos = _playerPos;

	switch (key)
	{
	case InputMgr::Up:
		_playerPos.first--;
		break;
	case InputMgr::Down:
		_playerPos.first++;
		break;
	case InputMgr::Left:
		_playerPos.second--;
		break;
	case InputMgr::Right:
		_playerPos.second++;
		break;
	}
}

//
// checkPlayerMoving에서 호출하는 함수
// event 설정 및 bool 값을 변경시켜준다.
// 
void GameMgr::checkNextEvent(bool *isMoving, char ch)
{
	if (ch == '0')
	{
		*isMoving = true;
		_playerEvent = None;
	}
	else if (ch == '2')
	{
		*isMoving = false;
		_playerEvent = InvisibleWall;
	}
	else if (ch == '3')
	{
		*isMoving = true;
		_playerEvent = FallTrap;
	}
	else if (ch == '4')
	{
		*isMoving = true;
		_playerEvent = BoomTrap;
	}
	else if (ch == 'd')
	{
		*isMoving = true;
		_playerEvent = NextFloor;
	}
}